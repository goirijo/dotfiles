global !p
def prespace(snip):
	prespace=re.match("^ *",snip.v.text).group(0)
	snip+=prespace
endglobal
	
global !p
def smartshift(snip):
	prespace=re.match("^ *",snip.v.text).group(0)
	snip.shift()
	snip+=prespace
endglobal

snippet defreturn "Member declaration to definition" b
`!p snip.rv=re.match("^ *",snip.v.text).group(0)`/**
`!p snip.rv=re.match("^ *",snip.v.text).group(0)` * ${3:I would never forget to make a Doxygen explanation for a new routine.}
`!p snip.rv=re.match("^ *",snip.v.text).group(0)` */

`!p
snip.rv=re.match("^ *\w*",snip.v.text).group(0)` ${1:ParentClass}::`!p
functionparameters=re.sub("^ *\w* (.*);",r"\1",snip.v.text).rstrip()
returntype=re.match("^ *\w*",snip.v.text).group(0)
snip.rv=functionparameters
snip.shift()
snip+="{"
snip+=returntype
snip.shift()` ${2:returnval};
`!p
prespace=re.match("^ *",snip.v.text).group(0)
snip.shift()
snip+=prespace`$0
`!p
prespace=re.match("^ *",snip.v.text).group(0)
snip.shift()
snip+=prespace+"return "+t[2]+";"
snip.reset_indent()
snip+=prespace+"}"`
endsnippet

snippet defvoid "Void member declaration to definition" b
`!p snip.rv=re.match("^ *",snip.v.text).group(0)`/**
`!p snip.rv=re.match("^ *",snip.v.text).group(0)` * ${3:I would never forget to make a Doxygen explanation for a new routine.}
`!p snip.rv=re.match("^ *",snip.v.text).group(0)` */

`!p
snip.rv=re.match("^ *\w*",snip.v.text).group(0)` ${1:Parent Class}::`!p
functionparameters=re.sub("^ *\w* (.*);",r"\1",snip.v.text).rstrip()
returntype=re.match("^ *\w*",snip.v.text).group(0)
snip.rv=functionparameters
snip.shift()
snip+="{"
snip.shift()`
`!p
prespace=re.match("^ *",snip.v.text).group(0)
snip.shift()
snip+=prespace`$0
`!p
prespace=re.match("^ *",snip.v.text).group(0)
snip.shift()
snip+=prespace+"return;"
snip.reset_indent()
snip+=prespace+"}"`
endsnippet

snippet defcons "Constructor member declaration to definition" b
`!p
parentclass=re.sub("^\s*(\w*)\(.*$",r"\1",snip.v.text).rstrip()
functionparameters=re.sub("^ *\w* (.*);",r"\1",snip.v.text).rstrip()
prespace=re.match("^ *",snip.v.text).group(0)
snip.rv=parentclass+"::"+functionparameters
snip+="{"
snip.shift()
snip.reset_indent()
snip+=prespace`$0
}
endsnippet

snippet guard "Make an include guard" b
#ifndef ${1:`!p snip.rv = snip.basename.upper()`}_HH
#define $1_HH

$0

#endif
endsnippet

snippet casmguard "Make an include guard for a casm header" b
#ifndef ${1:`!p snip.rv = snip.basename.upper()`}_HH
#define $1_HH

namespace CASM
{
$0
}

#endif
endsnippet

snippet dox "Doxygen comment placeholder" b
/**
 * ${0:Only good code has good comments.}
 */
endsnippet

snippet stdebug "Print your variables to screen" b
std::cout<<"DEBUGGING: $1 is "<<$1<<std::endl;
$0
endsnippet

snippet ERROR "Print an error for your routine" b
std::cerr<<"ERROR in ${1:Class}::${2:routine}"<<std::endl;
std::cerr<<"${3:Helpful error message}"<<std::endl;
exit($4);
endsnippet

snippet WARNING "Print an error for your routine" b
std::cerr<<"WARNING in ${1:Class}::${2:routine}"<<std::endl;
std::cerr<<"${3:Helpful warning message}"<<std::endl;
endsnippet

snippet forit "Iterator loop from begin() to end()" b
for(auto ${1:it}=${2:container}.begin(); $1!=$2.end(); ++$1)
{`!p smartshift(snip)` $0
}
endsnippet

snippet template "Template for typename" b
template<typename ${1:T}>
$0
endsnippet

snippet ifcontains "Use std::find to see if a container holds a value" b
if(std::find(${1:container}.begin(), $1.end(), ${2:searchvalue})!=$1.end())
{`!p smartshift(snip)` $0
}
endsnippet

snippet ifnotcontains "Use std::find to see if a container does not hold a value" b
if(std::find(${1:container}.begin(), $1.end(), ${2:searchvalue})==$1.end())
{`!p smartshift(snip)` $0
}
endsnippet
